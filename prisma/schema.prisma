// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions       Session[]
  auditLogs      AuditLog[]
  createdPanels  Panel[]           @relation("PanelCreator")
  assignedPanels PanelAssignment[]
  mnpRequests    MNPRequest[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  sessionId String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Flow Control Panels
model Panel {
  id          String      @id @default(cuid())
  name        String
  description String?
  type        PanelType
  config      Json // JSON configuration for panel settings
  status      PanelStatus @default(ACTIVE)
  priority    Int         @default(1)
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  createdBy   User              @relation("PanelCreator", fields: [createdById], references: [id])
  assignments PanelAssignment[]
  controls    Control[]
  flows       Flow[]
  metrics     PanelMetric[]

  @@map("panels")
}

model PanelAssignment {
  id         String   @id @default(cuid())
  panelId    String
  userId     String
  canEdit    Boolean  @default(false)
  canView    Boolean  @default(true)
  assignedAt DateTime @default(now())

  panel Panel @relation(fields: [panelId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([panelId, userId])
  @@map("panel_assignments")
}

// Control Elements
model Control {
  id        String      @id @default(cuid())
  panelId   String
  name      String
  type      ControlType
  position  Json // {x, y, width, height}
  config    Json // Control-specific configuration
  value     String? // Current value
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  panel Panel        @relation(fields: [panelId], references: [id], onDelete: Cascade)
  logs  ControlLog[]

  @@map("controls")
}

model ControlLog {
  id        String   @id @default(cuid())
  controlId String
  oldValue  String?
  newValue  String?
  userId    String?
  timestamp DateTime @default(now())
  action    String // "UPDATED", "ACTIVATED", "DEACTIVATED"

  control Control @relation(fields: [controlId], references: [id], onDelete: Cascade)

  @@map("control_logs")
}

// Flow Management
model Flow {
  id          String     @id @default(cuid())
  panelId     String
  name        String
  description String?
  flowData    Json // Flow definition (nodes, edges, etc.)
  status      FlowStatus @default(DRAFT)
  version     Int        @default(1)
  isActive    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  panel      Panel           @relation(fields: [panelId], references: [id], onDelete: Cascade)
  executions FlowExecution[]

  @@map("flows")
}

model FlowExecution {
  id        String          @id @default(cuid())
  flowId    String
  status    ExecutionStatus
  startTime DateTime        @default(now())
  endTime   DateTime?
  duration  Int? // Duration in milliseconds
  input     Json?
  output    Json?
  errorMsg  String?

  flow  Flow                @relation(fields: [flowId], references: [id], onDelete: Cascade)
  steps FlowExecutionStep[]

  @@map("flow_executions")
}

model FlowExecutionStep {
  id          String          @id @default(cuid())
  executionId String
  stepName    String
  status      ExecutionStatus
  startTime   DateTime        @default(now())
  endTime     DateTime?
  duration    Int?
  input       Json?
  output      Json?
  errorMsg    String?

  execution FlowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@map("flow_execution_steps")
}

// MNP (Mobile Number Portability) Management
model MNPRequest {
  id                String          @id @default(cuid())
  requestId         String          @unique
  mobileNumber      String
  currentOperator   String
  requestedOperator String
  customerName      String
  customerEmail     String?
  customerAddress   String?
  idProof           String // Document type
  idProofNumber     String
  status            MNPStatus       @default(PENDING)
  requestDate       DateTime        @default(now())
  processedDate     DateTime?
  completionDate    DateTime?
  rejectionReason   String?
  priority          RequestPriority @default(NORMAL)
  createdById       String

  createdBy User               @relation(fields: [createdById], references: [id])
  history   MNPStatusHistory[]
  documents MNPDocument[]

  @@map("mnp_requests")
}

model MNPStatusHistory {
  id         String    @id @default(cuid())
  requestId  String
  fromStatus MNPStatus
  toStatus   MNPStatus
  changedAt  DateTime  @default(now())
  changedBy  String?
  comments   String?

  mnpRequest MNPRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@map("mnp_status_history")
}

model MNPDocument {
  id         String   @id @default(cuid())
  requestId  String
  fileName   String
  fileType   String
  fileSize   Int
  filePath   String
  uploadedAt DateTime @default(now())

  mnpRequest MNPRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@map("mnp_documents")
}

// Metrics and Analytics
model PanelMetric {
  id        String   @id @default(cuid())
  panelId   String
  metricKey String
  value     Float
  unit      String?
  timestamp DateTime @default(now())

  panel Panel @relation(fields: [panelId], references: [id], onDelete: Cascade)

  @@map("panel_metrics")
}

// Notifications
model Notification {
  id        String               @id @default(cuid())
  title     String
  message   String
  type      NotificationType     @default(INFO)
  priority  NotificationPriority @default(NORMAL)
  isRead    Boolean              @default(false)
  userId    String?
  createdAt DateTime             @default(now())
  readAt    DateTime?

  @@map("notifications")
}

// Audit Logging
model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String // Table/Model name
  resourceId String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Configuration
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  dataType  String // "string", "number", "boolean", "json"
  category  String?
  isPublic  Boolean  @default(false)
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  OPERATOR
  VIEWER
  USER
}

enum PanelType {
  CONTROL_PANEL
  DASHBOARD
  MONITORING
  ANALYTICS
  WORKFLOW
}

enum PanelStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  ARCHIVED
}

enum ControlType {
  BUTTON
  SWITCH
  SLIDER
  INPUT
  DISPLAY
  CHART
  GAUGE
  LED
  PROGRESS
}

enum FlowStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
  ERROR
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum MNPStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  PROCESSING
  COMPLETED
  REJECTED
  CANCELLED
}

enum RequestPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SYSTEM
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}
