// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  role      UserRole
  status    UserStatus @default(ACTIVE)
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  orders     Order[]
  dispatches Dispatch[]

  @@map("users")
}

model RawMaterial {
  id           String      @id @default(cuid())
  itemId       String      @unique
  name         String
  supplier     String?
  category     String      @default("Raw Material")
  stock        Float
  unit         String      @default("kg")
  price        Float
  status       StockStatus @default(IN_STOCK)
  reorderLevel Float?
  remarks      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  productMaterials ProductMaterial[]

  @@map("raw_materials")
}

model Product {
  id           String      @id @default(cuid())
  itemId       String      @unique
  name         String
  type         String? // "rolls" or "bundles"
  category     String      @default("Finished Product")
  stock        Int         @default(0)
  unit         String      @default("units")
  price        Float
  width        Float?
  length       Float? // length per roll/bundle
  status       StockStatus @default(IN_STOCK)
  isTopSelling Boolean     @default(false)
  unitsSold    Int         @default(0)
  remarks      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  materials   ProductMaterial[]
  orderItems  OrderItem[]
  productions ProductionBatch[]

  @@map("products")
}

model ProductMaterial {
  id            String @id @default(cuid())
  productId     String
  rawMaterialId String
  quantity      Float // quantity of raw material needed per product unit

  // Relations
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  rawMaterial RawMaterial @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade)

  @@unique([productId, rawMaterialId])
  @@map("product_materials")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("customers")
}

model Order {
  id             String      @id @default(cuid())
  orderId        String      @unique
  customerId     String
  userId         String?
  date           DateTime    @default(now())
  status         OrderStatus @default(PENDING)
  total          Float
  salesProcess   String?
  deliveryMethod String? // X-Amoney, FOR Delivery, Transport
  carrier        String? // Transport company if selected
  trackingId     String?
  remarks        String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  customer        Customer          @relation(fields: [customerId], references: [id])
  user            User?             @relation(fields: [userId], references: [id])
  items           OrderItem[]
  dispatch        Dispatch?
  ProductionBatch ProductionBatch[]

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  colorTop    String?
  colorBottom String?
  length      Float
  width       Float
  quantity    Int
  unit        String
  unitPrice   Float
  total       Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model ProductionBatch {
  id        String           @id @default(cuid())
  batchId   String           @unique // e.g., HD2030-001, WC1525-002
  orderId   String?
  productId String
  quantity  Int
  status    ProductionStatus @default(PENDING)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  order   Order?  @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("production_batches")
}

model Dispatch {
  id              String         @id @default(cuid())
  dispatchId      String         @unique
  orderId         String         @unique
  userId          String? // dispatcher
  customer        String
  status          DispatchStatus @default(READY_FOR_PICKUP)
  loadingDate     DateTime?
  driverName      String?
  shippingAddress String?
  carNumber       String?
  driverNumber    String?
  carrier         String? // e.g., FedEx, UPS
  transportation  String? // Self pickup, Third-party logistics
  trackingId      String?
  packageDetails  String? // Weight, Dimensions
  remarks         String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])
  user  User? @relation(fields: [userId], references: [id])

  @@map("dispatches")
}

model Alert {
  id        String        @id @default(cuid())
  type      AlertType
  message   String
  severity  AlertSeverity @default(INFO)
  isRead    Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("alerts")
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  SALES
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  PROCESSING
  IN_PRODUCTION
  COMPLETED
  SHIPPED
  DELIVERED
  CANCELLED
  DELAYED
}

enum ProductionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
}

enum DispatchStatus {
  READY_FOR_PICKUP
  IN_TRANSIT
  DELIVERED
  DELAYED
}

enum AlertType {
  STOCK_LOW
  PRODUCTION_DELAY
  ORDER_UPDATE
  SYSTEM
}

enum AlertSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}
