// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  role      UserRole
  status    UserStatus @default(ACTIVE)
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  orders     Order[]
  dispatches Dispatch[]

  @@map("users")
}

model RawMaterial {
  id           String      @id @default(cuid())
  itemId       String      @unique // e.g., MAT001, MAT002
  name         String // e.g., PVC Material, Canvas Fabric
  category     String      @default("Raw Material")
  stock        Float // in sq m or kg
  price        Float // per unit
  status       StockStatus @default(IN_STOCK)
  reorderLevel Float? // minimum stock level for alerts
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  productMaterials ProductMaterial[]

  @@map("raw_materials")
}

model Product {
  id           String      @id @default(cuid())
  itemId       String      @unique // e.g., PROD001
  name         String // e.g., Heavy Duty Tarpaulin 20x30
  category     String      @default("Finished Product")
  stock        Int         @default(0)
  price        Float // per unit
  status       StockStatus @default(IN_STOCK)
  isTopSelling Boolean     @default(false)
  unitsSold    Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  materials   ProductMaterial[]
  orderItems  OrderItem[]
  productions ProductionBatch[]

  @@map("products")
}

model ProductMaterial {
  id            String @id @default(cuid())
  productId     String
  rawMaterialId String
  quantity      Float // quantity of raw material needed per product unit

  // Relations
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  rawMaterial RawMaterial @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade)

  @@unique([productId, rawMaterialId])
  @@map("product_materials")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("customers")
}

model Order {
  id         String      @id @default(cuid())
  orderId    String      @unique // e.g., ORD123, ORD124
  customerId String
  userId     String? // assigned user/sales person
  date       DateTime    @default(now())
  status     OrderStatus @default(PENDING)
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  customer   Customer          @relation(fields: [customerId], references: [id])
  user       User?             @relation(fields: [userId], references: [id])
  items      OrderItem[]
  production ProductionBatch[]
  dispatch   Dispatch?

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float
  total     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model ProductionBatch {
  id        String           @id @default(cuid())
  batchId   String           @unique // e.g., HD2030-001, WC1525-002
  orderId   String?
  productId String
  quantity  Int
  status    ProductionStatus @default(PENDING)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  order   Order?  @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("production_batches")
}

model Dispatch {
  id         String         @id @default(cuid())
  dispatchId String         @unique // e.g., DIS001, DIS002
  orderId    String         @unique
  userId     String? // dispatcher
  customer   String
  status     DispatchStatus @default(READY_FOR_PICKUP)
  carrier    String? // e.g., FedEx, UPS, DHL
  trackingId String?
  date       DateTime       @default(now())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])
  user  User? @relation(fields: [userId], references: [id])

  @@map("dispatches")
}

model Alert {
  id        String        @id @default(cuid())
  type      AlertType
  message   String
  severity  AlertSeverity @default(INFO)
  isRead    Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("alerts")
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  SALES
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  PROCESSING
  IN_PRODUCTION
  COMPLETED
  SHIPPED
  DELIVERED
  CANCELLED
  DELAYED
}

enum ProductionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
}

enum DispatchStatus {
  READY_FOR_PICKUP
  IN_TRANSIT
  DELIVERED
  DELAYED
}

enum AlertType {
  STOCK_LOW
  PRODUCTION_DELAY
  ORDER_UPDATE
  SYSTEM
}

enum AlertSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}
